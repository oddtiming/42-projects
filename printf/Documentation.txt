- printf

- "-0." flags :
	- "-" : "A negative field width flag; the converted value is to be left adjusted
			on the field boundary.  Except for n conversions, the converted value is
			padded on the right with blanks, rather than on the left with blanks or
			zeros.  A - overrides a 0 if both are given." - man 3 printf
		NOTES:	- Left padding will only be noticed if something else comes after, since all you get is extra blank spaces at the right
		of the conversion specifier 
	- '0' : "Zero padding.  For all conversions except n, the converted value is
			padded on the left with zeros rather than blanks.  If a precision is
			given with a numeric conversion (d, i, o, u, i, x, and X), the 0 flag is
			ignored." - man 3 printf
		- Does not work with strings, chars, and pointers!! UB; on my macbook it results in the unaffected string.
			0 conversions are UB for s, c, and p

	- '.' :	"An optional precision, in the form of a period . followed by an optional digit
			string.  If the digit string is omitted, the precision is taken as zero.  This gives
			the minimum number of digits to appear for d, i, o, u, x, and X conversions, the num-
			ber of digits to appear after the decimal-point for a, A, e, E, f, and F conversions,
			the maximum number of significant digits for g and G conversions, or the maximum num-
			ber of characters to be printed from a string for s conversions." - man 3 printf
		NOTES:	- The interaction of '.' and '0' only matters for types with a decimal (so a precision). e.g. float
			'.' (precision) is UB with c and p
	- NOTE:	these seem to only be used in conjunction with a following digit specifier, otherwise a "width" of 0 
			is taken by default.
		- %[flag][digit][conversion specifier]
			e.g. int i = 42; printf("%019d", i) ==> 000000000000000042

	- '0.':	For non-float types, increasing the precision is tantamount to increasing the number
			of digits to appear, aka to 0 pad to the right.
	- '0-':	Throws a warning. Cannot be used together since - overwrites 0. 
			Results in ' ' padding to the left ('-' supercedes '0')
	- '.-':	For some fucking reason, the ".-" flags throw a warning, but "-." is fine.
			%-.19f = -42.0000000000000000000
			%.-19f = -42
			Found the fucking reason! Precision is always thrown after the other modifiers. It's in the man, you daft cunt.
			This means that the precision needs to be followed by a conversion specifier in the form of an optional digit string.


- "# +" flags:
	- "#" :	"For x and X conversions, a non-zero result has the string `0x' (or `0X' for X conversions)
			prepended to it.  For a, A, e, E, f, F, g, and G conversions, the result will always contain a decimal
			point, even if no digits follow it (normally, a decimal point appears in the results of those conversions
			only if a digit follows).  For g and G conversions, trailing zeros are not removed from the result as
			they would otherwise be." - man 3 printf
	- " " :	"A blank should be left before a positive number produced by a signed conversion (a, A, d, e, E, f, F, g, G, or i)." - man 3 printf
	- "+" :	"A sign must always be placed before a number produced by a signed conversion.
			A "+" overrides a space if both are used." - man 3 printf


- arguments (cspdiuxX%) (eE, fF, gG, o)
	- cspdiuxX%
	- %d & %i:
		- Both take int as a type.
		%d and %i behave similar with printf
		%d and %i behavior is different in scanf
			 "%d and %i behave similar with printf%d assume base 10 while %i auto detects the base. 
			 Therefore, both specifiers behaves differently while they are used with an input specifier. So, 012 would be 10 with %i but 12 with %d. 

    		- %d takes integer value as signed decimal integer i.e. it takes negative values along with positive values but values should be in 
			decimal otherwise it will print garbage value.( Note: if input is in octal format like:012 then %d will ignore 0 and take input as 12)
     
    		- %i takes integer value as integer value with decimal, hexadecimal or octal type. To enter a value in hexadecimal format – 
			value should be provided by preceding “0x” and value in octal format – value should be provided by preceding “0”." - https://www.geeksforgeeks.org/difference-d-format-specifier-c-language/
	- %p:	prints the address as standardized by '%#x' (man also says '%#lx', but I don't yet understand)
		Takes (void *) as a type
		-	Use the printhex() fct to print a long(pointer) conversion to the format string.
			%p of (int)s1 = 0x80b96f9
			%p of (long)s1 == %p of s1 = 0x1080b96f9
	- %s:	
		NOTE : printf() returns (null) in case of NULL string

- VA_ARG (STDARG)
	- va_list ap == list of variable agruments, ap = argument pointer. 
	- SEE EXAMPLE FROM MAN 3 STDARG BELOW
	- void va_start(va_list ap, [last argument of which the type is known]);
		e.g. test_fct(char *format, ...){va_list lst} will call va_start(lst, format);
	- type va_arg(va_list ap, type); 
		- va_arg will access the next argument in the va_list ap that was initialized with va_start.
		- va_arg will return the argument, so make sure to assign it to something.
		- TESTS NEEDED: 
			- I believe that you can use [s, d, i, c, ...] interchangeably with [char *, int, int, char, ...]
				WRONG; only the example in man 3 stdarg seems to point towards that, usage requires a conversion.
				EXTRA WRONG; Looking more closely at the example allows me to see that I'm denser than mercury
			- What happens if the wrong format specifier is used?
				The argument will be converted according to the format specifier, so it is case-dependent.
			- What happens if you try to access more arguments than were passed to the fct?
				    "If there is no next argument, or if type is not compatible with the type of the actual next argument (as promoted accord-
     				ing to the default argument promotions), random errors will occur." -man 3 STDARG
					In the case I tested, it sometimes added the last argument twice, sometimes segfaulted, so case-dependent
	- void va_copy(va_list ap_dest, va_list ap_src);
		- va_copy copies the current state of the ap_src to ap_dest, so it can be iterated over once again.
		- copying a va_list means that the copy also needs to be closed with va_end.
	- void va_end(va_list ap);
		- The very last thing to do to clean up the list that you accessed.
		


NOTES:
- list of proceeding :
	X- Set up va_arg, play with it a bit
	X- set up % conversions ; best way to see if my function works at all
	X- do individual conversions for each variable type
	- Create a char	*ft_strinject(char *dest, char const *src, int position) that will inject the src string into the
		dest string at the desired position.
		Issue is that the initial format string contains the conversion specifiers, so they would need to be "replaced"
		- Alternate idea is to simply strjoin everytime, both for the piece between '%' and for the converted args.
	
	- Set up the struct for each variable (s_var/t_var)
		- Linked list
		- The initializer function (lstnew) should also be set up with va_arg for flexibility.
		- struct variables:
			- arg number (starts at 1)
			- Flags
			- width
			- precision
			- string conversion.
	NOTE:	each conversion is treated separately, as it can be applied to the same variable with the %[digits]$ specifier.
			Maybe have both the conversions and the variables in a linked list? 
		10/05: 	NOPE ! I can't iterate through va_list without knowing the type. 
				So solution is linked list with each conversion isolated, a static to keep track of whether args are accessed
				in order or sequentially (throw an error if conflict), and then treat each conversion as the string
				to be added to the return string by ft_strinject

	- Set up flag conversions; 
		- "-0." must be used in conjuncture
		- " ", "+", "#" must be used separately
	- Implement a static (global?) variable to count the amount of characters printed; 
		alternatively could convert to a string before outputting and simply counting the resulting string ; might be safer.

- IDEAS:
	- 	use a static struct declaration to store the flags, the string to be printed,
		the relevant conversions, and the length?
		NOTE: The relevant flags apply to every single function, so there are two options:
			1) Store the flags and update them for each conversion specifier. Downside is I have to go through them twice,
			one for checking and one for actual conversions. Could work if I hold the return string in a static variable
			and only output it if everything is valid. I like that better.
			2) Use a linked list to append every printf argument. In this case, I would need a singleton function
			that declares the first node (so the first argument's parameters) and a string  
	-	Singleton function:
			a function that holds the static struct. Could take va_arg to determine
			what to initialize with it.
			1) the struct holds the current flags, the current variable type, and the total string 
	- 	A is_format_valid(char *format){} function to check whether the conversions are valid,
		the flags combination is valid.
		- The only ways I would seem to be able to do that would be with the typeof() compile time operator
		that is available with gcc, or a hacky way to use sizeof() ? Not too sure about the last one.
			There seems to be possibilities with using the assert function, but I would need to read more into that
		https://stackoverflow.com/questions/6280055/how-do-i-check-if-a-variable-is-of-a-certain-type-compare-two-types-in-c

Additional bonuses:
- long
- long long ( + wchar_t conversions)
- h && H
- float (3 conversions) e, f, g
- n flag

**STDARG Example** :
	void foo(char *fmt, ...)
	{
			va_list ap, ap2;
			int d;
			char c, *s;

			va_start(ap, fmt);
			va_copy(ap2, ap);
			while (*fmt)
					switch(*fmt++) {
					case 's':                       /* string */
							s = va_arg(ap, char *);
							printf("string %s\n", s);
							break;
					case 'd':                       /* int */
							d = va_arg(ap, int);
							printf("int %d\n", d);
							break;
					case 'c':                       /* char */
							/* Note: char is promoted to int. */
							c = va_arg(ap, int);
							printf("char %c\n", c);
							break;
					}
			va_end(ap);
			...
			/* use ap2 to iterate over the arguments again */
			...
			va_end(ap2);
	}